class Ecuacion

instance variables
    public raices : seq of real := [];
    raiz1 : real;
    raiz2 : real;
    
functions  
  public getPositivo :  (seq of real) -> real
  getPositivo (raices) == 
  (
     if raices(1) >= 0 then
      raices(1)
    else 
      raices(2)
  )pre len raices = 2 and (raices(1) >= 0 or raices(2) >= 0);


  
operations
  public Ecuacion: () ==> Ecuacion
  Ecuacion() == (
    raices := [];
    raiz1 := -1;
    raiz2 := -1;
  );
  public calcularRaices: real * real * real ==> seq of real
  calcularRaices(a, b, c) == (
    let
      discriminante : real = (b * b) - (4 * a * c)
    in
      if discriminante = 0 then 
        (raices := [-b / 2 * a];
        raiz1 := raices(1);
        )
      elseif discriminante > 0 then 
        (
          raices := [(-b + MATH`sqrt(discriminante)) / (2 * a), (-b - MATH`sqrt(discriminante)) / (2 * a)];
          raiz1 := raices(1);
          raiz2 := raices(2);
        )
      else 
        raices := [];
      
      return raices;
  );


end Ecuacion
