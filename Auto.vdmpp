class Auto

types
  public ubicacionRegister :: latitud  : real longitud : real;
  public estadoAceleracion = <Acelerando> | <Desacelerando> | <Quieto> | <VelocidadConstante>;

values
  umbralMinimaAcelearcion : real = 0.1;

instance variables
  aceleracion : real := 0; -- m/s2
  aceleracionInstanteAnterior : real :=0 ; -- m/s2
  public velocidad: real := 0; -- km/h
  velocidadInstanteAnterior: real := 0; -- km/h
  public estado: estadoAceleracion := <Quieto>; 
  tamano: real := 0; -- metros
  public ubicacion: ubicacionRegister := mk_ubicacionRegister(0,0);
  usuario: Usuario;

inv ubicacion.longitud >= -180 and ubicacion.longitud <= 180;
inv ubicacion.latitud >= -90 and ubicacion.latitud <= 90;
inv tamano > 0;


operations
  -- Constructor para crear un nuevo auto con los datos proporcionados
  public Auto: real * estadoAceleracion * real * real * real * Usuario==> Auto
  Auto(velo, estadoAceleracion, tama, lat, lon, user) ==
    (
      velocidad := velo;
      estado := estadoAceleracion;
      tamano := tama;
      ubicacion := mk_ubicacionRegister(lat, lon);
      usuario := user;
      return self;
    );
  

  public Auto : real * real * real==> Auto
  Auto(velo, lat, lon) ==
    (
      velocidad := velo;
      estado := <Quieto>;
      tamano := 2;
      ubicacion := mk_ubicacionRegister(lat, lon);
      usuario := new Usuario();
      return self;
    );


  -- Actualizar velocdad

  public setVelocidad : real ==> ()
  setVelocidad(nuevaVelocidad) == (
    velocidadInstanteAnterior := velocidad;
    velocidad := nuevaVelocidad;
  );

  -- calcular aceleracion

  public calcularAceleracion : real ==> real
  calcularAceleracion(intervaloTiempo) == (
    aceleracionInstanteAnterior := aceleracion;
    aceleracion := ((velocidad * 5 /18) - (velocidadInstanteAnterior * 5 / 18))/intervaloTiempo;

    if abs(aceleracion) < umbralMinimaAcelearcion
      then setEstadoAceleracion(<VelocidadConstante>)
    else if aceleracion < 0 
      then setEstadoAceleracion(<Desacelerando>)
    else if aceleracion > 0
      then setEstadoAceleracion(<Acelerando>);
    return aceleracion;
  );

  -- Operaci贸n para obtener el estado de aceleraci贸n
  public getEstado: () ==> estadoAceleracion
  getEstado() ==
    return estado;

  -- Operaci贸n para obtener la ubicaci贸n del auto
  public getUbicacion: () ==> ubicacionRegister
  getUbicacion() ==
    return ubicacion;

  public getVelocidad: () ==> real
  getVelocidad() == 
    return velocidad;

  public setUbicacion : real * real ==> ()
  setUbicacion(latitud, longitud) == (
    ubicacion := mk_ubicacionRegister(latitud, longitud);
    IO`print(ubicacion.latitud);
  );

  private setEstadoAceleracion : estadoAceleracion ==> ()
  setEstadoAceleracion (nuevoEstado) == (
    estado := nuevoEstado;
  );
  public notificar: (SituacionDeRebase`avisoConductorTipos) ==> ()
  notificar(aviso) == (
    IO`print("NOTIFICACION ==> Auto de ");
    IO`print(usuario.getNombre());
    IO`print(" : ");
    IO`println(aviso);
  );

end Auto
