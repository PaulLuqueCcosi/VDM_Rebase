class Auto

types
  public ubicacionRegister :: longitud : real latitud : real;
  public estadoAceleracion = <Acelerando> | <Desacelerando> | <Quieto> | <VelocidadConstante>;
  public etiquetaPosicion = <Carril_2> | <Carril_1_adelante> | <Carril_1_atas>;

values
  umbralMinimaAcelearcion : real = 0.1;

instance variables
  aceleracion : real := 0;
  aceleracionInstanteAnterior : real :=0 ;
  velocidad: real := 0;
  velocidadInstanteAnterior: real := 0;
  public estado: estadoAceleracion := <Quieto>; 
  public etiqueta: etiquetaPosicion;
  tamano: real := 0;
  public ubicacion: ubicacionRegister := mk_ubicacionRegister(0,0);
  usuario: Usuario;

inv ubicacion.longitud >= -180 and ubicacion.longitud <= 180;
inv ubicacion.latitud >= -90 and ubicacion.latitud <= 90;
inv tamano > 0;


operations
      -- Constructor para crear un nuevo auto con los datos proporcionados
  public Auto: real * estadoAceleracion * etiquetaPosicion * real * real * real * Usuario==> Auto
  Auto(velo, estadoAceleracion, etiquetaPosi, tama, lon, lat, user) ==
    (
      velocidad := velo;
      estado := estadoAceleracion;
      etiqueta := etiquetaPosi;
      tamano := tama;
      ubicacion := mk_ubicacionRegister(lon, lat);
      usuario := user;
      return self;
    );
  
  -- Actualizar velocdad

  public setVelocidad : real ==> ()
  setVelocidad(nuevaVelocidad) == (
    velocidadInstanteAnterior := velocidad;
    velocidad := nuevaVelocidad;
  );

  -- calcular aceleracion

  public calcularAceleracion : real ==> real
  calcularAceleracion(intervaloTiempo) == (
    aceleracionInstanteAnterior := aceleracion;
    aceleracion := (velocidad-velocidadInstanteAnterior)/intervaloTiempo;

    if abs(aceleracion) < umbralMinimaAcelearcion
      then setEstadoAceleracion(<VelocidadConstante>)
    else if aceleracion < 0 
      then setEstadoAceleracion(<Desacelerando>)
    else if aceleracion > 0
      then setEstadoAceleracion(<Acelerando>);
    

    return aceleracion;
  );

  -- Operaci贸n para obtener el estado de aceleraci贸n
  public getEstado: () ==> estadoAceleracion
  getEstado() ==
    return estado;

  -- Operaci贸n para obtener la ubicaci贸n del auto
  public getUbicacion: () ==> ubicacionRegister
  getUbicacion() ==
    return ubicacion;

  public setUbicacion : real * real ==> Auto
  setUbicacion(latitud, longitud) == (
    ubicacion := mk_ubicacionRegister(longitud, latitud);
    IO`print(ubicacion.latitud);
    return self;
  );

  public setEstadoAceleracion : estadoAceleracion ==> ()
  setEstadoAceleracion (nuevoEstado) == (
    estado := nuevoEstado;
  );
  public notificar: (SituacionDeRebase`avisoConductorTipos) ==> ()
  notificar(aviso) == (
    IO`println(aviso);
  );
  -- public test: (real) ==> real
  -- test(nueva) == (
  --   self.setVelocidad(nueva);
  --   return self.calcularAceleracion(0.2);
  -- );
end Auto
