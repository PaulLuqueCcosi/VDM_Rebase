class SituacionDeRebase

types
  public estadoRebase = <Normal> | <Rebase>;
  public avisoConductorTipos = <Muy_peligroso> | <Riesgoso> | <Aceptado> | <Sin_riesgo> | <Quieren_adelantar>;
  public datosCarro :: latitud : real longitud : real velocidad : real;
  public autosRegister :: autoAtras: Auto autoMedio: Auto autoFrente: Auto;

  
instance variables
  solve : Ecuacion;
  autos: autosRegister;
  terrenoCarretera: Carretera;
  avisoAutoAtras: avisoConductorTipos;
  avisoAutoMedio: avisoConductorTipos;
  avisoAutoFrente: avisoConductorTipos;
  isActualizado : bool;
  timepoUltimaActualizacion : real; -- en milisegundos.
  estado : estadoRebase;
  distanciaMinimaManiobra : real; -- en metros.

inv autos.autoAtras <> autos.autoMedio and autos.autoAtras <> autos.autoFrente and autos.autoMedio <> autos.autoFrente;


operations

  -- Constructor para crear una nueva situación de rebase con los autos y la carretera proporcionados
  public SituacionDeRebase: Auto * Auto * Auto * Carretera ==> SituacionDeRebase
  SituacionDeRebase(autoAtras, autoMedio, autoFrente, carretera) ==
    (
      autos := mk_autosRegister(autoAtras, autoMedio, autoFrente);
      terrenoCarretera := carretera;
      avisoAutoAtras := <Sin_riesgo>;
      avisoAutoMedio := <Sin_riesgo>;
      avisoAutoFrente := <Sin_riesgo>;
      estado := <Normal>;
      distanciaMinimaManiobra := terrenoCarretera.distanciaMinimaAdelantamiento();
      solve := new Ecuacion();
      return self;
    );
  -- Método para actualizar la situación con las nuevas posiciones y velocidades de los autos
  public actualizarSituacion : datosCarro * datosCarro * datosCarro * real ==> seq of avisoConductorTipos
  actualizarSituacion(carroAtrasNuevoDato, carroMedioNuevoDato, carroFrenteNuevoDato, tiempoTranscurrido) ==
    (
      -- actualizamos estados
      actualizarDatosAuto(carroAtrasNuevoDato, autos.autoAtras);
      actualizarDatosAuto(carroMedioNuevoDato, autos.autoMedio);
      actualizarDatosAuto(carroFrenteNuevoDato, autos.autoFrente);
      timepoUltimaActualizacion := tiempoTranscurrido;
      isActualizado := true;

      -- si esatamos en rebase
      if isEnRebase() then
        estado := <Rebase>;
      
      if estado = <Rebase> then
        calcularRiesgoRebase();
      

      return [avisoAutoAtras, avisoAutoMedio, avisoAutoFrente];
    );

  -- Método para calcular el riesgo de colisión
  public calcularRiesgoRebase: () ==> ()
  calcularRiesgoRebase() == (
    -- distancia minimia
    if verificarDistanciaRecomendada() then
      -- velocidades actuales
      verificarVelocidad();
    
  );



  public verificarVelocidad:() ==> ()
  verificarVelocidad() == (
    if ObtenerTiempoAtrasFrente() < ObtenerTiempoMedioDelante() then
      (
        avisoAutoAtras := <Aceptado>; 
        avisoAutoMedio := <Quieren_adelantar>;
        avisoAutoFrente := <Quieren_adelantar>;
      )
    else 
      (
        avisoAutoAtras := <Riesgoso>; 
        avisoAutoMedio := <Quieren_adelantar>;
        avisoAutoFrente := <Quieren_adelantar>;
      );
    
  );

  private verificarDistanciaRecomendada:() ==> bool
  verificarDistanciaRecomendada() == (
    if ObtenerdistanciaAtrasFrente() < distanciaMinimaManiobra then 
      (
        avisoAutoAtras := <Muy_peligroso>; 
        avisoAutoMedio := <Quieren_adelantar>;
        avisoAutoFrente := <Quieren_adelantar>;
        return false;
      ) 
    else 
      return true;
  );

  private isEnRebase:() ==> bool
  isEnRebase() == (
    if estado = <Rebase> 
      then  return true
    elseif  diferenciaVelocidades(autos.autoAtras, autos.autoMedio) >= 15
      then return true
    else 
      return false; 

  );


  private actualizarDatosAuto: datosCarro * Auto ==> ()
  actualizarDatosAuto(datos, auto) == (
    auto.setUbicacion(datos.latitud, datos.longitud);
    auto.setVelocidad(datos.velocidad);
  );

  private diferenciaVelocidades: Auto * Auto ==> real
  diferenciaVelocidades(auto1, auto2) == (
    return auto1.getVelocidad() - auto2.getVelocidad();

  ) pre isActualizado = true;
  
  -- Método para obtener la distancia entre el auto de atrás y el auto del medio
  public ObtenerdistanciaAtrasMedio: () ==> real
  ObtenerdistanciaAtrasMedio() == (
      let 
        lat1 : real = autos.autoAtras.getUbicacion().latitud,
        lon1 : real = autos.autoAtras.getUbicacion().longitud,
        lat2 : real = autos.autoMedio.getUbicacion().latitud,
        lon2 : real = autos.autoMedio.getUbicacion().longitud
      in
        return terrenoCarretera.getDistanciaPuntos(lat1, lon1, lat2, lon2);
  );

  -- Método para obtener la distancia entre el auto de atrás y el auto de adelante
  public ObtenerdistanciaAtrasFrente: () ==> real
  ObtenerdistanciaAtrasFrente() ==
    let 
      lat1 : real = autos.autoAtras.getUbicacion().latitud,
      lon1 : real = autos.autoAtras.getUbicacion().longitud,
      lat2 : real = autos.autoFrente.getUbicacion().latitud,
      lon2 : real = autos.autoFrente.getUbicacion().longitud
    in
      return terrenoCarretera.getDistanciaPuntos(lat1, lon1, lat2, lon2);
    
  -- Método para obtener la distancia entre el auto del medio y el auto de adelante
  public ObtenerdistanciaMedioDelante: () ==> real
  ObtenerdistanciaMedioDelante() ==
   let 
      lat1 : real = autos.autoMedio.getUbicacion().latitud,
      lon1 : real = autos.autoMedio.getUbicacion().longitud,
      lat2 : real = autos.autoFrente.getUbicacion().latitud,
      lon2 : real = autos.autoFrente.getUbicacion().longitud
    in
      return terrenoCarretera.getDistanciaPuntos(lat1, lon1, lat2, lon2);

  -- Método para obtener el tiempo necesario para que el auto de atrás alcance al auto de adelante
  public ObtenerTiempoAtrasFrente: () ==> real
  ObtenerTiempoAtrasFrente() == (
    let 
      auto1 = autos.autoAtras,
      auto2 = autos.autoFrente,

      a1 = auto1.calcularAceleracion(timepoUltimaActualizacion * 1000), -- tiempo en seg.
      a2 = auto2.calcularAceleracion(timepoUltimaActualizacion * 1000),

      v1 = auto1.getVelocidad()*5/18, -- m/s
      v2 = auto2.getVelocidad()*5/18, -- m/s

      lat1 = auto1.getUbicacion().latitud,
      lon1 = auto1.getUbicacion().longitud,
      lat2 = auto2.getUbicacion().latitud,
      lon2 = auto2.getUbicacion().longitud,

      d = terrenoCarretera.getDistanciaPuntos(lat1,lon1,lat2, lon2),

      -- valores para resolver la ecu.
      a = (a1 + a2) /2,
      b = v1 + v2,
      c = -d

    in

      return solve.calcularRaices(a, b, c).getPositivo();
  )
  pre isActualizado = true;
  
  -- Método para obtener el tiempo necesario para que el auto del medio alcance al auto de adelante
  public ObtenerTiempoMedioDelante: () ==> real
  ObtenerTiempoMedioDelante() == (
    let 
      auto1 = autos.autoMedio,
      auto2 = autos.autoFrente,

      a1 = auto1.calcularAceleracion(timepoUltimaActualizacion * 1000),
      a2 = auto2.calcularAceleracion(timepoUltimaActualizacion * 1000),

      v1 = auto1.getVelocidad() * 5 / 18,
      v2 = auto2.getVelocidad() * 5 / 18,

      lat1 = auto1.getUbicacion().latitud,
      lon1 = auto1.getUbicacion().longitud,
      lat2 = auto2.getUbicacion().latitud,
      lon2 = auto2.getUbicacion().longitud,

      d = terrenoCarretera.getDistanciaPuntos(lat1,lon1,lat2, lon2),

      -- valores para resolver la ecu.
      a = (a1 + a2) /2,
      b = v1 + v2,
      c = -d

    in

      return solve.calcularRaices(a, b, c).getPositivo();
  )
  pre isActualizado = true;

 -- Método para obtener el tiempo necesario para que el auto del medio alcance al auto de adelante
  public ObtenerTiempoAtrasMedio: () ==> real
  ObtenerTiempoAtrasMedio() == (
    let 
      auto1 = autos.autoAtras,
      auto2 = autos.autoMedio,

      a1 = auto1.calcularAceleracion(timepoUltimaActualizacion * 1000),
      a2 = auto2.calcularAceleracion(timepoUltimaActualizacion * 1000),

      v1 = auto1.getVelocidad() * 5 / 18,
      v2 = auto2.getVelocidad() * 5 / 18,

      lat1 = auto1.getUbicacion().latitud,
      lon1 = auto1.getUbicacion().longitud,
      lat2 = auto2.getUbicacion().latitud,
      lon2 = auto2.getUbicacion().longitud,

      d = terrenoCarretera.getDistanciaPuntos(lat1,lon1,lat2, lon2),

      -- valores para resolver la ecu.
      a = (a1 - a2) /2,
      b = v1 - v2,
      c = -d

    in

      return solve.calcularRaices(a, b, c).getPositivo();
  )
  pre isActualizado = true;



  -- Método para obtener el auto de atrás
  public GetCarroAtras: () ==> Auto
  GetCarroAtras() ==
    return autos.autoAtras;

  -- Método para obtener el auto del medio
  public GetCarroMedio: () ==> Auto
  GetCarroMedio() ==
    return autos.autoMedio;

  -- Método para obtener el auto de adelante
  public GetCarroAdelante: () ==> Auto
  GetCarroAdelante() ==
    return autos.autoFrente;
end SituacionDeRebase
